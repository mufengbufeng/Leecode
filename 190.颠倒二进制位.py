#
# @lc app=leetcode.cn id=190 lang=python3
#
# [190] 颠倒二进制位
#
# https://leetcode.cn/problems/reverse-bits/description/
#
# algorithms
# Easy (72.52%)
# Likes:    686
# Dislikes: 0
# Total Accepted:    239.3K
# Total Submissions: 329.9K
# Testcase Example:  '00000010100101000001111010011100'
#
# 颠倒给定的 32 位无符号整数的二进制位。
# 
# 提示：
# 
# 
# 请注意，在某些语言（如
# Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
# 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数
# -1073741825。
# 
# 
# 
# 
# 示例 1：
# 
# 
# 输入：n = 00000010100101000001111010011100
# 输出：964176192 (00111001011110000010100101000000)
# 解释：输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
# ⁠    因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
# 
# 示例 2：
# 
# 
# 输入：n = 11111111111111111111111111111101
# 输出：3221225471 (10111111111111111111111111111111)
# 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
# ⁠    因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
# 
# 
# 
# 提示：
# 
# 
# 输入是一个长度为 32 的二进制字符串
# 
# 
# 
# 
# 进阶: 如果多次调用这个函数，你将如何优化你的算法？
# 
#

# @lc code=start
class Solution:
    """
    位运算分治
        n = ((n >> 1) & M1) | ((n & M1) << 1) & 0xFFFFFFFF
        前半部分 n >> 1 & M1:
            将偶数为移到奇数位
            10101010101010101010101010101010 >> 1 = 01010101010101010101010101010101
            清零偶数位
            01010101010101010101010101010101 & 01010101010101010101010101010101 = 01010101010101010101010101010101 
        后半部分 n & M1 << 1:
            把偶数为清零， 保留奇数位
            10101010101010101010101010101010 & 01010101010101010101010101010101 = 00000000000000000000000000000000 
            把奇数位移到偶数位
            00000000000000000000000000000000 << 1 = 00000000000000000000000000000000
        合并
            01010101010101010101010101010101 | 00000000000000000000000000000000 = 01010101010101010101010101010101
        重复上述步骤
            奇数位和偶数位交换
            2位交换
            4位交换
            8位交换
            16位交换
        tips:
            a >> b: a 右移 b 位   在这个题目中，右移 1 位，相当于把偶数位移到奇数位
            a & b: a 与 b 都为 1 时，结果为 1，否则为 0 在这个题目中，清零指定的位置
            a | b: a 与 b 有一个为 1 时，结果为 1，否则为 0 在这个题目中，合并两个数
    """
    def reverseBits(self, n: int) -> int:
        M1 = 0x55555555  # 01010101010101010101010101010101
        M2 = 0x33333333  # 00110011001100110011001100110011
        M4 = 0x0f0f0f0f  # 00001111000011110000111100001111
        M8 = 0x00ff00ff  # 00000000111111110000000011111111
        n = ((n >> 1) & M1) | ((n & M1) << 1) & 0xFFFFFFFF
        n = ((n >> 2) & M2) | ((n & M2) << 2) & 0xFFFFFFFF
        n = ((n >> 4) & M4) | ((n & M4) << 4) & 0xFFFFFFFF
        n = ((n >> 8) & M8) | ((n & M8) << 8) & 0xFFFFFFFF
        res = (n >> 16) | (n << 16) & 0xFFFFFFFF
        return res
# @lc code=end

